# general
snippet
abbr        ()
options     head
  (${1:TARGET})

snippet     print
abbr        (print ... )
options     head
  (print ${1:TARGET})

snippet     display
abbr        (display ... )
options     head
  (display ${1:TARGET})

# math
snippet     square
abbr        (square ... )
options     head
  (square ${1:TARGET})

snippet     inc
abbr        (inc ... )
options     head
  (inc ${1:TARGET})

snippet     dec
abbr        (dec ... )
options     head
  (dec ${1:TARGET})

# define
snippet     define
abbr        (define ... )
options     head
  (define ${1:FUNC} (lambda (${2:ARGS}) ${3:CONTENTS}))

snippet     let
abbr        (let ... )
options     head
  (let (${1:VAR} ${2:INIT}) ${3:EXPR})

snippet     defvar
abbr        (defvar ... )
options     head
  (defvar ${1:VAR} ${2:NUM})

snippet     set!
abbr        (set! ... )
options     head
  (set! ${1:TARGET} ${1:TARGET})

# list operator
snippet     first
abbr        (first ... )
options     head
  (first ${1:TARGET})

snippet     rest
abbr        (rest ... )
options     head
  (rest ${1:TARGET})

snippet     car
abbr        (car ... )
options     head
  (car ${1:TARGET})

snippet     cdr
abbr        (cdr ... )
options     head
  (cdr ${1:TARGET})

snippet     cons
abbr        (cons ... )
options     head
  (cons ${1:TARGET} ${2:TARGET})

snippet     take
abbr        (take ... )
options     head
  (take ${1:LIST} ${2:NUM})

snippet     drop
abbr        (drop ... )
options     head
  (drop ${1:LIST} ${2:NUM})

snippet     length
abbr        (length ... )
options     head
  (length ${1:LIST})

snippet     iota
abbr        generate arithmetic
options     head
  (iota ${1:NUM} ${2:START} ${3:STEP})

snippet     list-tabulate
abbr        map arithmetic
options     head
  (list-tabulate ${1:NUM} (lambda (${2:ARGS}) ${3:CONTENTS}))

snippet     mapchar
abbr        (mapchar ... )
options     head
  (mapchar #'${1:FUNC} ${2:ARGS})

snippet     apply
abbr        (apply ... )
options     head
  (apply ${1:FUNC} ${2:ARGLIST})
# control
snippet     if
abbr        (if ... )
options     head
  (if ${1:PRED} ${2:THEN} ${3:ELSE})

snippet     when
abbr        (when ... )
options     head
  (when ${1:CONDITION} ${2:TARGET})

snippet     and
abbr        (and ... )
options     head
  (and ${1:TARGET})

snippet     or
abbr        (or ... )
options     head
  (or ${1:TARGET})

snippet     cond
abbr        (cond ... )
options     head
  (cond (${1:PRED} ${2:THEN})
        (${3:PRED} ${4:THEN})
        (else ${5:ELSE}))

# repetition
snippet     dotimes
abbr        (dotimes ... )
options     head
  (dotimes (${1:VAR} ${2:TIME} ${3:RESULT}) ${4:TARGET})

snippet     dolist
abbr        (dolist ... )
options     head
  (dolist (${1:ITER} ${2:LIST} t) ${3:TARGET})

snippet     while
abbr        (while ... )
options     head
  (while ${1:PRED} ${2:EXPR})

snippet     loop
abbr        (loop ... )
options     head
  (loop
    (if ${1:COND} (return ))
    ${2:EXPR})

snippet     do
abbr        (do ... )
options     head
  (do (${1:VAR} ${2:INIT} ${3:STEP})
    (${4:COND} ${5:RETURN})
    ${6:EXPR})

snippet     progn
abbr        (progn ... )
options     head
  (progn ${1:EXPR} ${2:EXPR})
# Bool
snippet     even?
abbr        (even? ... )
options     head
  (even? ${1:TARGET})

snippet     odd?
abbr        (odd? ... )
options     head
  (odd? ${1:TARGET})

snippet     zero?
abbr        (zero? ... )
options     head
  (zero? ${1:TARGET})

snippet     cons?
abbr        list is blank or not
options     head
  (cons? ${1:TARGET})

snippet     null?
abbr        nil or not
options     head
  (null? ${1:TARGET})

# gauche.sequence
snippet     shuffle
abbr        (shuffle ... )
options     head
  (shuffle ${1:LIST})
